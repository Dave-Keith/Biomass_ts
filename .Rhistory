var <- "SSB"
var <- "SSB"
length(character(var))
character(var)
nchar(var)
rm(list=ls(all=T))
library(matlab)
library(lme4)
library(arm)
detach("package:nlme")
setwd("d:/Github/Current_papers/Biomass_ts")
ASD_MGMT<-read.csv("ASD_MGMT.csv", header=T)
names(ASD_MGMT)
ASD_MGMT$Stock.ID
levels(ASD_MGMT$Management)
#ASD_MGMT$Species
geo.mean <- function(x,n) prod(x)^(1/n)
unique.stocks <- as.character(unique(ASD_MGMT$Stock.ID))
num.stocks <- length(unique.stocks)
str(ASD_MGMT)
levels(ASD_MGMT$Management)
unique.stocks <- as.character(unique(ASD_MGMT$Stock.ID))
num.stocks <- length(unique.stocks)
var <- "SSB"
db <- NULL
ages <- NULL
age.quan <- NULL
young.ages <- NULL
old.ages <- NULL
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
db <- NULL
ages <- NULL
age.quan <- NULL
young.ages <- NULL
old.ages <- NULL
name <- unique.stocks[i]
i=1
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
# Remove any columns
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:9,which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)+length(dat.names))]
}
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
}
ages[[name]] <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
ages
cols
rows
dim(db[[name]])
is.null(dim(db[[name]])
length(cols) > 0 && length(rows) > 0
length(rows)
length(cols)
length(cols) > 0 && length(rows) > 0
name
unique.stocks[i]
unique.stocks
dat
var <- "BM"
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
dat
var <- "Num"
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
dat
var <- "Catch"
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
dat
names(ASD_MGMT)
i=2
name <- unique.stocks[i]
name
var <- "SSB"
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
cols
rows
i=3
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) > 0)
dat
i=4
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
dat
var <- "BM"
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
cols <- which(colSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) > 0)
cols
dat
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
dat
i=5
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
dat
cols <- which(colSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
cols
cols <- which(colSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
# Remove any columns with no data
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:9,which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)+length(dat.names))]
} # end if(length(cols) > 0)
# Remove any years with no data
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
} # end if(length(rows) > 0)
# If we have data...
if(length(cols) > 0 && length(rows) > 0)
{
# OK, this is a bizarro way to get the ages but it does the trick!
ages[[name]] <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
}
ages
length(rows)
which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
which(colSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) > 0)
cols <- which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
cols
db[[name]] <- dat[,c(1:length(dat.names),cols + length(dat.names))]
db[[name]]
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:length(dat.names),cols + length(dat.names))]
} # end if(length(cols) > 0)
# Remove any years with no data
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
} # end if(length(rows) > 0)
length(cols) > 0 && length(rows) == 0
ages[[name]] <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
young.ages
old.ages
ages
age.quan
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old
db[[name]]$SSB.young
db[[name]]$SSB.total
plot(db[[name]]$SSB.total)
plot(db[[name]]$SSB.total,log=y,type="o",col="black",pch=15)
plot(db[[name]]$SSB.total,log="y",type="o",col="black",pch=15)
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(SSB.old),max(SSB.total)))
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old),max(db[[name]]$SSB.total)))
min(db[[name]]$SSB.old)
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old <-   rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.young
db[[name]]$SSB.old
db[[name]]$SSB.total
rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db <- NULL
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
# Remove any columns with no data
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:length(dat.names),cols + length(dat.names))]
} # end if(length(cols) > 0)
# Remove any years with no data
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
} # end if(length(rows) > 0)
# If we have data...
if(length(cols) > 0 && length(rows) == 0)
{
# OK, this is a bizarro way to get the ages but it does the trick!
ages[[name]] <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
grep(old.ages[[name]],)
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
} # end if(length(cols) > 0 && length(rows) > 0)
db[[name]]
ages[[name]] <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old),max(db[[name]]$SSB.total)))
db[[name]]$SSB.total
db[[name]]$SSB.total
rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
dat.names
db[[name]]$SSB.old
db[[name]]$SSB.young
rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
name
db[[name]]$SSB.total
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
old.ages[[name]]
ages[[name]]
names(db[[name]]
[(grep("[[:digit:]]",names(db[[name]])))])
var.names <- names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))])
var.names
young.ages[[name]]
quantile(ages[[name]])
age.quan[[name]]
var.names.young <- var.names[1:length(young.ages[[name]])]
var.names.young
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.young))))
ages[[name]]
length(old.ages[[name]] )
ages[[name]]  <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
ages
ages[[name]]  <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
var.names <- names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))])
var.names
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
var.names.young <- var.names[1:length(young.ages[[name]])]
var.names.young
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
old.ages[[name]]
length(ages[[name]) - length(old.ages[[name]] )
length(ages[[name]])
ages[[name]]
range(ASD_MGMT$BM.0,na.rm=T)
range(ASD_MGMT$BM.1,na.rm=T)
range(ASD_MGMT$SSB.1,na.rm=T)
range(ASD_MGMT$SSB.0,na.rm=T)
length(ages[[name]])
length(old.ages[[name]] )
old.ages[[name]]
(length(ages[[name]]) - length(old.ages[[name]] ) +1)
var.names.young
var.names.old <- var.names[(length(ages[[name]]) - length(old.ages[[name]] ) +1) : length(ages[[name]]]
(length(ages[[name]]) - length(old.ages[[name]] ) +1)
var.names.old <- var.names[(length(ages[[name]]) - length(old.ages[[name]] ) +1) : length(ages[[name]])]
var.names.old
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% var.names.old))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.young))))
var.names.old
var.names.old <- var.names[(length(ages[[name]]) - length(old.ages[[name]] ) +1) : length(ages[[name]])]
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% var.names.old))))
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.old))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.young))))
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old),max(db[[name]]$SSB.total)))
lines(db[[name]]$SSB.old)
lines(db[[name]]$SSB.old~db[[name]]$Year)
lines(db[[name]]$SSB.old~db[[name]]$Year,type="o",col="blue",pch=16)
lines(db[[name]]$SSB.young~db[[name]]$Year,type="o",col="orange",pch=17)
library(gam)
library(gamm4)
library(gamm)
tst <- gam(db[[name]]$SSB.total~db[[name]]$Year)
tst <- gam(db[[name]]$SSB.total~s(db[[name]]$Year))
tst <- lm(db[[name]]$SSB.total~db[[name]]$Year)
tst <- lm(SSB.total~Year,data=db[[name]])
tst <- glm(SSB.total~Year,data=db[[name]])
tst <- gam(SSB.total~Year,data=db[[name]])
summary(tst)
plot(tst)
tst <- gam(SSB.total~s(Year),data=db[[name]])
summary(tst)
plot(tst)
var <- "BM"
db <- NULL
ages <- NULL
age.quan <- NULL
young.ages <- NULL
old.ages <- NULL
i=5
# so we want to run a loop to grab the biomass estiamtes for each stock
for(i in 1:num.stocks)
{
#if(i != 69 && i != 72 && i != 125 && i != 19 && i !=18 && i != 9 && i != 29 && i !=41)
#{
# Get the stock information....
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
# Remove any columns with no data
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:length(dat.names),cols + length(dat.names))]
} # end if(length(cols) > 0)
# Remove any years with no data
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
} # end if(length(rows) > 0)
# If we have data...
if(length(cols) > 0 && length(rows) == 0)
{
# OK, this is a bizarro way to get the ages but it does the trick!
ages[[name]]  <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
var.names <- names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))])
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
var.names.young <- var.names[1:length(young.ages[[name]])]
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
var.names.old <- var.names[(length(ages[[name]]) - length(old.ages[[name]] ) +1) : length(ages[[name]])]
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.old))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.young))))
} # end if(length(cols) > 0 && length(rows) > 0)
} # end for(i in 1:num.stocks)
str(db)
name
tst <- gam(SSB.total~s(Year),data=db[[name]])
summary(tst)
plot(tst)
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old),max(db[[name]]$SSB.total)))
lines(db[[name]]$SSB.old~db[[name]]$Year,type="o",col="blue",pch=16)
lines(db[[name]]$SSB.young~db[[name]]$Year,type="o",col="orange",pch=17)
min(db[[name]]$SSB.old
)
db[[name]]$SSB.old
tst <- gam(SSB.old~s(Year),data=db[[name]])
summary(tst)
plot(tst)
tst <- gam(SSB.young~s(Year),data=db[[name]])
summary(tst)
plot(tst)
tst <- do.call("rbind",db[[name]]$Stock.ID)
tst <- do.call("rbind",db[[name]])
head(tst)
str(db[[name]])
head(tst)
tst <- do.call("cbind",db[[name]])
head(tst)
rm(list=ls(all=T))
library(matlab)
library(lme4)
library(arm)
detach("package:nlme")
#setwd("d:/Dropbox/My_Papers/Biomass_and_age/")
setwd("d:/Github/Current_papers/Biomass_ts")
ASD_MGMT<-read.csv("ASD_MGMT.csv", header=T,stringsAsFactors = F)
geo.mean <- function(x,n) prod(x)^(1/n)
unique.stocks <- as.character(unique(ASD_MGMT$Stock.ID))
num.stocks <- length(unique.stocks)
var <- "BM"
db <- NULL
ages <- NULL
age.quan <- NULL
young.ages <- NULL
old.ages <- NULL
# so we want to run a loop to grab the biomass estiamtes for each stock
for(i in 1:num.stocks)
{
#if(i != 69 && i != 72 && i != 125 && i != 19 && i !=18 && i != 9 && i != 29 && i !=41)
#{
# Get the stock information....
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
# Remove any columns with no data
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:length(dat.names),cols + length(dat.names))]
} # end if(length(cols) > 0)
# Remove any years with no data
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
} # end if(length(rows) > 0)
# If we have data...
if(length(cols) > 0 && length(rows) == 0)
{
# OK, this is a bizarro way to get the ages but it does the trick!
ages[[name]]  <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
var.names <- names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))])
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
var.names.young <- var.names[1:length(young.ages[[name]])]
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
var.names.old <- var.names[(length(ages[[name]]) - length(old.ages[[name]] ) +1) : length(ages[[name]])]
db[[name]]$SSB.total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$SSB.old   <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.old))))
db[[name]]$SSB.young <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.young))))
} # end if(length(cols) > 0 && length(rows) > 0)
} # end for(i in 1:num.stocks)
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old),max(db[[name]]$SSB.total)))
lines(db[[name]]$SSB.old~db[[name]]$Year,type="o",col="blue",pch=16)
lines(db[[name]]$SSB.young~db[[name]]$Year,type="o",col="orange",pch=17)
name
db[[name]]$SSB.total
db[[name]]$Year
c(min(db[[name]]$SSB.old),max(db[[name]]$SSB.total))
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old),max(db[[name]]$SSB.total)))
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old)+0.01,max(db[[name]]$SSB.total)))
lines(db[[name]]$SSB.old~db[[name]]$Year,type="o",col="blue",pch=16)
lines(db[[name]]$SSB.young~db[[name]]$Year,type="o",col="orange",pch=17)
plot(db[[name]]$SSB.total~db[[name]]$Year,log="y",type="o",col="black",pch=15,ylim=c(min(db[[name]]$SSB.old[db[[name]]$SSB.old>0]),max(db[[name]]$SSB.total)))
lines(db[[name]]$SSB.old~db[[name]]$Year,type="o",col="blue",pch=16)
lines(db[[name]]$SSB.young~db[[name]]$Year,type="o",col="orange",pch=17)
var <- "BM"
db <- NULL
ages <- NULL
age.quan <- NULL
young.ages <- NULL
old.ages <- NULL
i=5
# so we want to run a loop to grab the biomass estiamtes for each stock
for(i in 1:num.stocks)
{
#if(i != 69 && i != 72 && i != 125 && i != 19 && i !=18 && i != 9 && i != 29 && i !=41)
#{
# Get the stock information....
name <- unique.stocks[i]
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
#years <- as.character(ASD_MGMT$Year[ASD_MGMT$Stock.ID == name ][1])
cols <- which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
# Remove any columns with no data
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:length(dat.names),cols + length(dat.names))]
} # end if(length(cols) > 0)
# Remove any years with no data
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
} # end if(length(rows) > 0)
# If we have data...
if(length(cols) > 0 && length(rows) == 0)
{
# OK, this is a bizarro way to get the ages but it does the trick!
ages[[name]]  <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
var.names <- names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))])
age.quan[[name]] <- quantile(ages[[name]])
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
var.names.young <- var.names[1:length(young.ages[[name]])]
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
var.names.old <- var.names[(length(ages[[name]]) - length(old.ages[[name]] ) +1) : length(ages[[name]])]
db[[name]]$total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))))
db[[name]]$old   <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.old))))
db[[name]]$young <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.young))))
} # end if(length(cols) > 0 && length(rows) > 0)

for(t in 2:NY){
Cmed[t]<-log(m[t]*S*(S*N[t-1]+(2-S)*N[t])/2)
}
for(t in 1:NY){
clappers[t]~dlnorm(Cmed[t],ikappa.tau2)
}
# Observation equations
for(t in 1:NY){
# Survey biomass
Imed[t] <- log(q * K * P[t])
I[t] ~ dlnorm(Imed[t], I.precision[t])
# Survey recruitment
IRmed[t] <- log(ratiolined[t]* q * K * r[t])
IR[t] ~ dlnorm(IRmed[t], IR.precision[t])
# Predicted survey estimates
Ipred[t] <- q * B[t]
IRpred[t] <-ratiolined[t]* q * R[t]
Irep[t] ~ dlnorm(Imed[t], I.precision[t])#I(0,Ireplim)
IRrep[t] ~ dlnorm(IRmed[t], IR.precision[t])#I(0,IRreplim)
}
# Population commercial and recruit biomass posteriors
for(t in 1:NY){
B[t] <- P[t] * K
R[t] <- r[t] * K
}
# Exploitation and fishing mortality
for(t in 1:(NY-1)){
mu[t] <- C[t]/(B[t+1]+C[t])
Fmort[t] <- -log(max(1 - mu[t], 0.0001))
}
# Diagnostics: raw and scaled residuals
for(t in 1:NY){
Iresid[t] <- log(I[t]) - Imed[t]
Presid[t] <- log(P[t]) - Pmed[t]
IRresid[t] <- log(IR[t]) - IRmed[t]
sPresid[t] <- Presid[t] * 1/sigma
sIresid[t] <- Iresid[t] * pow(I.precision[t],0.5)
sIRresid[t] <- IRresid[t] * pow(IR.precision[t],0.5)
}
}
test3<-SSModel.jags(c(DDspa4.dat,BoFSPA4.priors),priors=priors,model.file=BoFmodel,seed=123,
Years=1983:2014, nchains=2,niter=50000,nburnin=25000,nthin=10,para=T)
model.file=BoFmodel
test3<-SSModel.jags(c(DDspa4.dat,BoFSPA4.priors),priors=priors,model.file=BoFmodel,seed=123,
Years=1983:2014, nchains=2,niter=50000,nburnin=25000,nthin=10,para=T)
library(SSModel)
test3<-SSModel.jags(c(DDspa4.dat,BoFSPA4.priors),priors=priors,model.file=BoFmodel,seed=123,
Years=1983:2014, nchains=2,niter=50000,nburnin=25000,nthin=10,para=T)
rm(list=ls(all=T))
# First we bring in SSModle, and the two JAGS variant functions needed to run SSModel in JAGS
library(SSModel)
library(R2jags)
library(R2WinBUGS)
# Load in the SSModel.jags and BoFmodel need to run JAGS
SSModel.jags <-
function(data,priors,inits,parms,model.file,Years,nchains,niter,nburnin,nthin,para=F,seed= 125)
{
ssmodel.call<-match.call()
if(missing(parms)) parms<-c("B","R","q","K","P","sigma","S","m","kappa.tau","r","Fmort","mu","Irep","IRrep")
write.model(model.file,con="model.txt")
if(para == F)
{
out<-jags(data, inits = NULL,parameters.to.save=parms, model.file="model.txt",
n.chains=nchains, n.iter=niter, n.burnin=nburnin,
n.thin=nthin)
}
if(para == T)
{
out<-jags.parallel(data, inits = NULL,parameters.to.save=parms, model.file="model.txt",
n.chains=nchains, n.iter=niter, n.burnin=nburnin,
n.thin=nthin,jags.seed = seed)
}
out<-c(out$BUGSoutput[c("sims.matrix","summary")],data = list(data),
priors = list(priors), Years = list(Years), ssmodel.call = ssmodel.call)
class(out)<-"SSModel"
temp<-file.remove("model.txt")
out
}
BoFmodel <-
function()
{
# Priors
# Population scaling factor
K ~ dlnorm(logK.a, logK.b)
# priors for survey recruitment index
for(t in 1:NY){
r[t] ~ dlnorm(r.a, r.b)
}
# priors for natural mortality
# prior for annual m
for(t in 1:NY){
m[t] ~ dlnorm(m.a, m.b)
}
#S=dissolution rate in days/365
S~dunif(S.a,S.b)
# priors for catchabilities
# Use prior based on Bourdages' field work
q ~ dbeta(q.a, q.b)
# prior for process noise
sigma ~ dunif(sigma.a, sigma.b)
isigma2 <- pow(sigma, -2)
# prior for clappers
# clappers
kappa.tau ~ dunif(kappa.tau.a, kappa.tau.b)
ikappa.tau2 <- pow(kappa.tau,-2)
# priors for observation errors
for(t in 1:NY)
{
I.var[t]<-2*log(pow(I.cv[t],2)+1)
I.precision[t] ~ dgamma(3,I.var[t])
I.vsam[t]<-pow(I.precision[t],-0.5)
IR.var[t]<-2*log(pow(IR.cv[t],2)+1)
IR.precision[t] ~ dgamma(3,IR.var[t])
IR.vsam[t]<-pow(IR.precision[t],-0.5)
}
# State equation
Pmed[1] <- -pow(sigma,2)/2
P[1] ~ dlnorm(Pmed[1], isigma2)
for(t in 2:NY){
Pmed[t] <- log(max(exp(-m[t]) * g[t-1] * (P[t-1] - C[t-1] / K) + exp(-m[t])*gR[t-1] * r[t-1], 0.001))
P[t] ~ dlnorm(Pmed[t], isigma2)
}
#Natural mortality from survey clapper index, revised for popcorn model
Cmed[1]<-log(m[1]*S*N[1])
for(t in 2:NY){
Cmed[t]<-log(m[t]*S*(S*N[t-1]+(2-S)*N[t])/2)
}
for(t in 1:NY){
clappers[t]~dlnorm(Cmed[t],ikappa.tau2)
}
# Observation equations
for(t in 1:NY){
# Survey biomass
Imed[t] <- log(q * K * P[t])
I[t] ~ dlnorm(Imed[t], I.precision[t])
# Survey recruitment
IRmed[t] <- log(ratiolined[t]* q * K * r[t])
IR[t] ~ dlnorm(IRmed[t], IR.precision[t])
# Predicted survey estimates
Ipred[t] <- q * B[t]
IRpred[t] <-ratiolined[t]* q * R[t]
Irep[t] ~ dlnorm(Imed[t], I.precision[t])#I(0,Ireplim)
IRrep[t] ~ dlnorm(IRmed[t], IR.precision[t])#I(0,IRreplim)
}
# Population commercial and recruit biomass posteriors
for(t in 1:NY){
B[t] <- P[t] * K
R[t] <- r[t] * K
}
# Exploitation and fishing mortality
for(t in 1:(NY-1)){
mu[t] <- C[t]/(B[t+1]+C[t])
Fmort[t] <- -log(max(1 - mu[t], 0.0001))
}
# Diagnostics: raw and scaled residuals
for(t in 1:NY){
Iresid[t] <- log(I[t]) - Imed[t]
Presid[t] <- log(P[t]) - Pmed[t]
IRresid[t] <- log(IR[t]) - IRmed[t]
sPresid[t] <- Presid[t] * 1/sigma
sIresid[t] <- Iresid[t] * pow(I.precision[t],0.5)
sIRresid[t] <- IRresid[t] * pow(IR.precision[t],0.5)
}
}
data <- DDspa4.dat
priors <-BoFSPA4.priors
inits <- BoFSPA4.inits
model.file=BoFmodel
test3<-SSModel.jags(c(DDspa4.dat,BoFSPA4.priors),priors=priors,model.file=BoFmodel,seed=123,
Years=1983:2014, nchains=2,niter=50000,nburnin=25000,nthin=10,para=T)
summary(test3)
rm(list=ls(all=T))
data <- DDspa4.dat
priors <-BoFSPA4.priors
inits <- BoFSPA4.inits
model.file=BoFmodel
library(SSModeljags)
library(R2WinBUGS)
parallel.run <-  SSModel(DDspa4.dat,BoFSPA4.priors,inits = NULL,model.file=BoFmodel,
Years=1983:2014,nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = T)
rm(list=ls(all=T))
data <- DDspa4.dat
priors <-BoFSPA4.priors
inits <- BoFSPA4.inits
model.file=BoFmodel
library(SSModeljags)
library(R2WinBUGS)
parallel.run <-  SSModel(DDspa4.dat,BoFSPA4.priors,inits = NULL,model.file=BoFmodel,
Years=1983:2014,nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = T)
detach("package:SSModel", unload=TRUE)
library("SSModeljags", lib.loc="~/R/win-library/3.2")
parallel.run <-  SSModel(DDspa4.dat,BoFSPA4.priors,inits = NULL,model.file=BoFmodel,
Years=1983:2014,nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = T)
default.inits <- SSModel(DDspa4.dat,BoFSPA4.priors,inits = inits,model.file="D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt",,Years=1983:2014,
nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = F)
BoFmodel
parallel.run <-  SSModel(DDspa4.dat,BoFSPA4.priors,inits = NULL,model.file="D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt",
Years=1983:2014,nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = T)
default.inits <- SSModel(DDspa4.dat,BoFSPA4.priors,inits = inits,model.file=model.file="D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt",Years=1983:2014,
nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = F)
default.inits <- SSModel(DDspa4.dat,BoFSPA4.priors,inits = inits,model.file="D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt",Years=1983:2014,
nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = F)
mod.tst="D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt"
mod.tst=write.model("D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt")
summary(default.inits)
default.inits <- SSModel(DDspa4.dat,BoFSPA4.priors,inits = inits,model.file="D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt",Years=1983:2014,
nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = F)
summary(default.inits)
parallel.run <-  SSModel(DDspa4.dat,BoFSPA4.priors,inits = NULL,model.file="D:/R/Assessment_fns/Model/Archive/JAGS/BoF_model_from_SSModeljags.txt",
Years=1983:2014,nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = T)
summary(parallel.run)
library("SSModel", lib.loc="~/R/win-library/3.2")
detach("package:SSModel", unload=TRUE)
library("SSModeljags", lib.loc="~/R/win-library/3.2")
detach("package:SSModeljags", unload=TRUE)
library("SSModel", lib.loc="~/R/win-library/3.2")
library(R2jags)
library(R2WinBUGS)
# Load in the SSModel.jags and BoFmodel need to run JAGS
SSModel.jags <-
function(data,priors,inits,parms,model.file,Years,nchains,niter,nburnin,nthin,para=F,seed= 125)
{
ssmodel.call<-match.call()
if(missing(parms)) parms<-c("B","R","q","K","P","sigma","S","m","kappa.tau","r","Fmort","mu","Irep","IRrep")
write.model(model.file,con="model.txt")
if(para == F)
{
out<-jags(data, inits = NULL,parameters.to.save=parms, model.file="model.txt",
n.chains=nchains, n.iter=niter, n.burnin=nburnin,
n.thin=nthin)
}
if(para == T)
{
out<-jags.parallel(data, inits = NULL,parameters.to.save=parms, model.file="model.txt",
n.chains=nchains, n.iter=niter, n.burnin=nburnin,
n.thin=nthin,jags.seed = seed)
}
out<-c(out$BUGSoutput[c("sims.matrix","summary")],data = list(data),
priors = list(priors), Years = list(Years), ssmodel.call = ssmodel.call)
class(out)<-"SSModel"
temp<-file.remove("model.txt")
out
}
BoFmodel <-
function()
{
# Priors
# Population scaling factor
K ~ dlnorm(logK.a, logK.b)
# priors for survey recruitment index
for(t in 1:NY){
r[t] ~ dlnorm(r.a, r.b)
}
# priors for natural mortality
# prior for annual m
for(t in 1:NY){
m[t] ~ dlnorm(m.a, m.b)
}
#S=dissolution rate in days/365
S~dunif(S.a,S.b)
# priors for catchabilities
# Use prior based on Bourdages' field work
q ~ dbeta(q.a, q.b)
# prior for process noise
sigma ~ dunif(sigma.a, sigma.b)
isigma2 <- pow(sigma, -2)
# prior for clappers
# clappers
kappa.tau ~ dunif(kappa.tau.a, kappa.tau.b)
ikappa.tau2 <- pow(kappa.tau,-2)
# priors for observation errors
for(t in 1:NY)
{
I.var[t]<-2*log(pow(I.cv[t],2)+1)
I.precision[t] ~ dgamma(3,I.var[t])
I.vsam[t]<-pow(I.precision[t],-0.5)
IR.var[t]<-2*log(pow(IR.cv[t],2)+1)
IR.precision[t] ~ dgamma(3,IR.var[t])
IR.vsam[t]<-pow(IR.precision[t],-0.5)
}
# State equation
Pmed[1] <- -pow(sigma,2)/2
P[1] ~ dlnorm(Pmed[1], isigma2)
for(t in 2:NY){
Pmed[t] <- log(max(exp(-m[t]) * g[t-1] * (P[t-1] - C[t-1] / K) + exp(-m[t])*gR[t-1] * r[t-1], 0.001))
P[t] ~ dlnorm(Pmed[t], isigma2)
}
#Natural mortality from survey clapper index, revised for popcorn model
Cmed[1]<-log(m[1]*S*N[1])
for(t in 2:NY){
Cmed[t]<-log(m[t]*S*(S*N[t-1]+(2-S)*N[t])/2)
}
for(t in 1:NY){
clappers[t]~dlnorm(Cmed[t],ikappa.tau2)
}
# Observation equations
for(t in 1:NY){
# Survey biomass
Imed[t] <- log(q * K * P[t])
I[t] ~ dlnorm(Imed[t], I.precision[t])
# Survey recruitment
IRmed[t] <- log(ratiolined[t]* q * K * r[t])
IR[t] ~ dlnorm(IRmed[t], IR.precision[t])
# Predicted survey estimates
Ipred[t] <- q * B[t]
IRpred[t] <-ratiolined[t]* q * R[t]
Irep[t] ~ dlnorm(Imed[t], I.precision[t])#I(0,Ireplim)
IRrep[t] ~ dlnorm(IRmed[t], IR.precision[t])#I(0,IRreplim)
}
# Population commercial and recruit biomass posteriors
for(t in 1:NY){
B[t] <- P[t] * K
R[t] <- r[t] * K
}
# Exploitation and fishing mortality
for(t in 1:(NY-1)){
mu[t] <- C[t]/(B[t+1]+C[t])
Fmort[t] <- -log(max(1 - mu[t], 0.0001))
}
# Diagnostics: raw and scaled residuals
for(t in 1:NY){
Iresid[t] <- log(I[t]) - Imed[t]
Presid[t] <- log(P[t]) - Pmed[t]
IRresid[t] <- log(IR[t]) - IRmed[t]
sPresid[t] <- Presid[t] * 1/sigma
sIresid[t] <- Iresid[t] * pow(I.precision[t],0.5)
sIRresid[t] <- IRresid[t] * pow(IR.precision[t],0.5)
}
}
data <- DDspa4.dat
priors <-BoFSPA4.priors
inits <- BoFSPA4.inits
model.file=BoFmodel
test3<-SSModel.jags(c(DDspa4.dat,BoFSPA4.priors),priors=priors,model.file=BoFmodel,seed=123,
Years=1983:2014, nchains=2,niter=50000,nburnin=25000,nthin=10,para=T)
summary(test3)
detach(SSModel)
library(SSModeljags)
detach("SSModel")
library(SSModel)
detach(SSModel)
detach(package:SSModel)
rm(list=ls(all=T))
data <- DDspa4.dat
priors <-BoFSPA4.priors
inits <- BoFSPA4.inits
model.file=BoFmodel
detach(package:SSModel)# unload if loaded...
library(SSModeljags)
library(R2WinBUGS)
default.inits <- SSModel(DDspa4.dat,BoFSPA4.priors,inits = inits,model.file=BoFmodel,Years=1983:2014,
nchains=2,niter=50000,nburnin=25000,nthin=10,Parallel = F)
summary(default.inits)
min(test3$summary[,9])
max(test3$summary[,8])
rm(list=ls(all=T))
library(matlab)
library(lme4)
library(arm)
library(gamm4)
library(lattice)
library(akima)
library(mapplots)
# For linux
#direct = "/media/sf_data/r/"
yr = as.numeric(format(Sys.time(), "%Y")) -1
# re-load rprofile if you have one...
source(".Rprofile")
#Also load in a couple of R files that will help with plotting, these are from the TESA GAMM course by Zuur that occured in Jan 2016
# See DK to get these if you need them.  I placed the scripts in the same folder as my .Rprofile so they would be easily accessable.
# Put these aren't mine to make public!!
direct = "d:/r/"
source(paste(direct,"DIYBiplot.R",sep=""))
source(paste(direct,"HighstatLibV9.R",sep=""))
#setwd("d:/Dropbox/My_Papers/Biomass_and_age/")
setwd("d:/Github/Current_papers/Biomass_ts")
ASD_MGMT<-read.csv("ASD_MGMT.csv", header=T,stringsAsFactors = F)
# Currently the mid-point of most time series is 1989...
mean.year <- round(mean(ASD_MGMT$Year))
ASD_MGMT$Year_cen <- ASD_MGMT$Year-mean.year
geo.mean <- function(x,n) prod(x)^(1/n)
unique.stocks <- as.character(unique(ASD_MGMT$Stock.ID))
num.stocks <- length(unique.stocks)
# What are we going to pick as our variable to look at?
# Options are any of the age specific variables... "SSB","BM","Num","Catch","FM",
var <- "BM"
db <- NULL
ages <- NULL
age.quan <- NULL
young.ages <- NULL
old.ages <- NULL
i=18
# so we want to run a loop to grab the biomass estiamtes for each stock
for(i in 1:num.stocks)
{
# Several of these stocks have a male and female entry, so we'll exclude the males
# Get the stock information....
name <- unique.stocks[i]
if(is.element(name,c("ALPLAICBSAIm","ARFLOUNDBSAIm","GHALBSAIm","NRSOLEEBSAIm","YSOLEBSAIm"))==F)
{
# Grab the names of the stock descriptors to keep and then subset the data by stock and to pull the appropriate
# variable defined by var above.
dat.names <- c("Stock.ID","Management","Area","Order","Family","Genus","Species","LME","Year","Year_cen")
dat <- subset(ASD_MGMT, Stock.ID == name ,select = c(dat.names,names(ASD_MGMT[,grep(var,names(ASD_MGMT))])))
# Determine which (if any) columns and rows have data
cols <- which(colSums(dat[,grep(var,names(dat))],na.rm=T) > 0)
rows <- which(rowSums(subset(dat,select = -c(which(names(dat) %in% dat.names))),na.rm=T) == 0)
# Remove any columns with no data
if(length(cols) > 0)
{
db[[name]] <- dat[,c(1:length(dat.names),cols + length(dat.names))]
} # end if(length(cols) > 0)
# Remove any years with no data
if(length(rows) > 0)
{
db[[name]] <- db[[name]][-rows,]
} # end if(length(rows) > 0)
# If we have data...
if(is.null(db[[name]]) == F)
{
# OK, this is a bizarro way to get the ages but it does the trick! Following line grabs the variable names...
ages[[name]]  <- as.numeric(substr(names(db[[name]][(grep("[[:digit:]]",
names(db[[name]])))]),start=(nchar(var)+2),stop=(nchar(var)+3)))
var.names <- names(db[[name]][(grep("[[:digit:]]",names(db[[name]])))])
# Now we break the ages into old and young quantiles, this splits the data into the oldest 25% and youngest 25% of ages
# Note that we don't think of + groups and that we round so that often it's not 25% (e.g. sometimes 20%, others may be 30%)
age.quan[[name]] <- quantile(ages[[name]])
#First the young
young.ages[[name]] <- round(age.quan[[name]][1]):round(age.quan[[name]][2])
var.names.young <- var.names[1:length(young.ages[[name]])]
# Now for the old
old.ages[[name]] <- round(age.quan[[name]][4]):round(age.quan[[name]][5])
var.names.old <- var.names[(length(ages[[name]]) - length(old.ages[[name]] ) +1) : length(ages[[name]])]
# A few differnt ways to define our response variable, stan might be the most statisically
# pleasing one, I think ratio is the easiest transformation to wrap my head around and to
# use when comparing models but statistical properties are wonderful
# The offset might work nicely in terms of the model too and avoid transformation concerns...
db[[name]]$total <- rowSums(subset(db[[name]],select = -c(which(names(db[[name]]) %in% dat.names))),na.rm=T)
# Replace 0's with half minimum non-zero value in time series just so log works
if(any(db[[name]]$total == 0))db[[name]]$total[db[[name]]$total == 0] <- 0.5*min(db[[name]]$total[db[[name]]$total > 0])
db[[name]]$total_ratio   <- db[[name]]$total/max(db[[name]]$total,na.rm=T)
db[[name]]$total_stan   <- scale(log(db[[name]]$total))
db[[name]]$total_offset   <- max(db[[name]]$total,na.rm=T)
db[[name]]$old   <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.old))),na.rm=T)
# Replace 0's with half minimum value in time series just so log works
if(any(db[[name]]$old == 0))db[[name]]$old[db[[name]]$old == 0] <- 0.5*min(db[[name]]$old[db[[name]]$old > 0])
db[[name]]$old_ratio   <- db[[name]]$old/max(db[[name]]$old,na.rm=T)
db[[name]]$old_stan   <- scale(log(db[[name]]$old))
db[[name]]$old_offset   <- max(db[[name]]$old,na.rm=T)
db[[name]]$young <- rowSums(subset(db[[name]],select = c(which(names(db[[name]]) %in% var.names.young))),na.rm=T)
# Replace 0's with half minimum value in time series just so log works
if(any(db[[name]]$young == 0))db[[name]]$young[db[[name]]$young == 0] <- 0.5*min(db[[name]]$young[db[[name]]$young > 0])
db[[name]]$young_ratio   <- db[[name]]$young/max(db[[name]]$young,na.rm=T)
db[[name]]$young_offset   <- max(db[[name]]$young,na.rm=T)
db[[name]]$young_stan   <- scale(log(db[[name]]$young))
# Now we can remove the individual age data as that's not especially necessary to keep
db[[name]] <- subset(db[[name]],select = -c(which(names(db[[name]]) %in% var.names)))
} # end if(length(cols) > 0 && length(rows) > 0)
} # end if(is.element(name,c("ALPLAICBSAIm","ARFLOUNDBSAIm","GHALBSAIm","NRSOLEEBSAIm","YSOLEBSAIm"))==F)
} # end for(i in 1:num.stocks)
# Make sure the columns all the same length
range(lapply(db,ncol))
db <- do.call("rbind",db)
aggregate(old_ratio~Management,db,FUN=mean)
aggregate(young_ratio~Management,db,FUN=mean)
aggregate(total_ratio~Management,db,FUN=mean)
mod.1.old.stan <- lm(old_stan~Year,data=db) # note their used to be a mod.1 when we had outliers in the data, they've been taken care of so mod.1 is gone..
mod.1.old.rat <- lm(old_ratio~Year,data=db) # note their used to be a mod.1 when we had outliers in the data, they've been taken care of so mod.1 is gone..
summary(mod.1.old.stan)
summary(mod.1.old.rat)
windows(11,8.5)
par(mfrow=c(2,2))
plot(mod.1.old.stan)
windows(11,8.5)
par(mfrow=c(2,2))
plot(mod.1.old.rat)
windows(11,8.5)
plot(old_ratio~Year,data=db)
windows(11,8.5)
par(mfrow=c(2,1))
acf(E1.old.stan)
acf(E1.old.rat)
E1.old.rat <- resid(mod.1.old.rat, type = "pearson")
Disp.rat <- sum(E1.old.rat^2) / mod.1.old.rat$df.res
Disp.rat
E1.old.stan <- resid(mod.1.old.stan, type = "pearson")
Disp.stan <- sum(E1.old.stan^2) / mod.1.old.stan$df.res
Disp.stan
F1.old.stan <- fitted(mod.1.old.stan)
F1.old.rat <- fitted(mod.1.old.rat)
windows(11,8.5)
par(mfrow=c(2,1))
acf(E1.old.stan)
acf(E1.old.rat)
windows(11,8.5)
par(mfrow=c(2,2))
acf(E1.old.stan)
acf(E1.old.rat)
pacf(E1.old.stan)
pacf(E1.old.rat)
windows(11,8.5)
par(mfrow=c(2,2))
acf(E1.old.stan)
pacf(E1.old.stan)
acf(E1.old.rat)
pacf(E1.old.rat)
mod.2.old.poisson <- glm(old~Year,data=db,offset=log(old_offset),family=quasipoisson)
mod.2.old.poisson <- glm(old~Year,data=db,offset=log(old_offset),family=quasipoisson)
summary(mod.2.old.poisson)
E2.old.poisson <- resid(mod.2.old.poisson, type = "deviance")
Disp.stan <- sum(E2.old.poisson^2) / mod.2.old.poisson$df.res
Disp.stan
